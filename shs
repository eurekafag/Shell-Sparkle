#!/bin/sh

CURDIR=`pwd`
cd "`dirname "$0"`"
. ./shsconfig

case "$1" in
    "c") cd "$CURDIR"
         git init "$2"
         cd "$2"
         git config receive.denyCurrentBranch ignore
         git config core.quotepath false
         ;;
    "e") DEVID=$(ls -1 /dev/disk/by-id | grep "^usb-" | grep "$SERIAL" | grep "part1")
         DEV=$(readlink -e "/dev/disk/by-id/$DEVID")
         MOUNTPOINT=$(grep "$DEV" /etc/mtab | cut -f2 -d " ")
         if [ -n "$MOUNTPOINT" ]
         then
            cd "$SOURCE"
            git add *
            git commit -a -m "`date`"
            git fetch "$MOUNTPOINT/$DEST"
            ERRORS=`git merge -m "Merge on \`date\`" FETCH_HEAD 2>&1 | grep "^CONFLICT"`
            if [ -n "$ERRORS" ]
            then
                ORIGIFS=$IFS
                IFS='
'
                for l in $ERRORS
                do
                    FILE=`echo $l | sed 's/CONFLICT (content): Merge conflict in \(.*\)$/\1/'`
                    git checkout ORIG_HEAD "$FILE"
                    FULLFILE=`basename "$FILE"`
                    EXT=${FULLFILE##*.}
                    if [ "$EXT" = "$FULLFILE" ]
                    then
                        EXT=
                    else
                        EXT=.$EXT
                    fi
                    FILENAME=${FULLFILE%.*}
                    git show FETCH_HEAD:"$FILE" > "`dirname "$FILE"`/${FILENAME}.remote$EXT"
                done
                IFS=$ORIGIFS
                git add *
                git commit -a -m "`date`"
            fi
            git push "$MOUNTPOINT/$DEST" master:master
            cd "$MOUNTPOINT/$DEST"
            git reset --hard
         else
            echo "Flash isn't mounted."
         fi
         ;;
    "s") cd "$SOURCE"
         git add *
         git commit -a -m "`date`"
         ;;
    "r") cd "$SOURCE"
         SELECTED=`git log --oneline "$2" | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Найденные ревизии" --text "Ревизии для файла $2" --column "Коммит" --column "Дата" --print-column=ALL`
         if [ -z "$SELECTED" ]
         then
            exit
         fi
         REV=`echo $SELECTED | cut -f1 -d "|"`
         DATE=`echo $SELECTED | cut -f2 -d "|"`
         RELPATH=${2##${SOURCE}/}
         FULLFILE=`basename "$2"`
         EXT=${FULLFILE##*.}
         if [ "$EXT" = "$FULLFILE" ]
         then
            EXT=
         else
            EXT=.$EXT
         fi
         FILENAME=${FULLFILE%.*}
         git show $REV:"$RELPATH" > "`dirname "$RELPATH"`/${FILENAME} ($DATE)$EXT"
         ;;
    "h") cd "$SOURCE"
         while true
         do
            SELECTED=`git log --oneline | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Ревизии" --text "Все ревизии" --column "Коммит" --column "Дата" --print-column=ALL --width=640 --height=480`
            if [ -z "$SELECTED" ]
            then
                exit
            fi
            REV=`echo $SELECTED | cut -f1 -d "|"`
            DATE=`echo $SELECTED | cut -f2 -d "|"`
            CURPATH=
            while true
            do
                FILES=`git ls-tree $REV "$CURPATH" | sed 's/^[^ ]* \([^ ]*\) [0-9a-f]*\s*\(.*\)$/\1\n\2/' | zenity --list --title "Файлы" --text "Вы здесь: $CURPATH" --column "Тип" --column "Название" --print-column=ALL --width=640 --height=480`
                if [ -z "$FILES" ]
                then
                    if [ -z "$CURPATH" ]
                    then
                        break
                    fi
                    CURPATH=`dirname "${CURPATH%/}"`/
                    if [ "$CURPATH" = "./" ]
                    then
                        CURPATH=
                    fi
                fi
                TYPE=`echo $FILES | cut -f1 -d "|"`
                FILE=`echo $FILES | cut -f2 -d "|"`
                case "$TYPE" in
                    "tree") CURPATH=$FILE/
                            ;;
                    "blob") FULLFILE=`basename "$FILE"`
                            EXT=${FULLFILE##*.}
                            if [ "$EXT" = "$FULLFILE" ]
                            then
                                EXT=
                            else
                                EXT=.$EXT
                            fi
                            FILENAME=${FULLFILE%.*}
                            git show $REV:"$FILE" > "$CURPATH$FILENAME ($DATE)$EXT"
                            exit
                            ;;
                esac
            done
         done
         ;;
esac

