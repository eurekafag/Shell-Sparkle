#!/bin/sh

CURDIR=`pwd`
cd "`dirname "$0"`"
. ./shsconfig

case "$1" in
    "i") SHSPATH=`pwd`/`basename $0`
         case "$2" in
         "t") mkdir -p "$HOME/.config/Thunar"
              COMMANDS=`sed "s,@shsexec@,$SHSPATH,g" thunar.tpl`
              if [ -f "$HOME/.config/Thunar/uca.xml" ]
              then
                cp "$HOME/.config/Thunar/uca.xml" "$HOME/.config/Thunar/uca.xml.bak"
                sed "s,\(<action><icon>[^<]*</icon><name>SHS [^<]*</name><command>[^<]*</command><description>[^<]*</description>\(<patterns>\*</patterns>\)*\(<directories/>\)*\(<audio-files/>\)*\(<image-files/>\)*\(<other-files/>\)*\(<text-files/>\)*\(<video-files/>\)*</action>\),,g" "$HOME/.config/Thunar/uca.xml" | sed "s,\(.*\)</actions>,\1$COMMANDS</actions>," > "$HOME/.config/Thunar/uca.xml.new"
                mv "$HOME/.config/Thunar/uca.xml.new" "$HOME/.config/Thunar/uca.xml"
              else
                echo "<?xml encoding="UTF-8" version="1.0"?>\n<actions>$COMMANDS</actions>" > "$HOME/.config/Thunar/uca.xml"
              fi
              ;;
         "n") if [ -z "`which nautilus-actions-config-tool`" ]
              then
                echo "ERROR: nautilus-actions isn't installed."
                exit 1
              fi
              TMP=`mktemp`
              COMIDS="244e1258-d9f0-48b5-be40-3c752a7b5ed3 323d26f2-aa2a-469b-a38b-805557d2c17c 63bbf7f3-d50f-4532-9a49-e699a7a8bd23 91f0e32e-855a-43ed-a74a-bc54ac5d2e8d 94bbe111-7ab6-4fd2-b864-4ff823a04368"
              gconftool-2 --spawn
              for i in $COMIDS
              do
                gconftool-2 --recursive-unset /apps/nautilus-actions/configurations/$i
              done
              killall gconfd-2
              sleep 2
              sed "s,@shsexec@,$SHSPATH,g" nautilus.tpl | sed "s,@shsbox@,$SOURCE,g" > $TMP
              gconftool-2 --spawn
              gconftool-2 --load $TMP
              rm $TMP
              killall gconfd-2
             ;;
         esac
         ;;
    "c") cd "$CURDIR"
         git init "$2"
         cd "$2"
         git config receive.denyCurrentBranch ignore
         git config core.quotepath false
         zenity --info --text="SHS exchange box was successfully created in $2"
         ;;
    "e") if [ "$NET" = "1" ]
         then
             FULLDEST=$DEST
         else
             if [ -n "$SERIAL" ]
             then
                DEVID=$(ls -1 /dev/disk/by-id | grep "^usb-" | grep "$SERIAL" | grep "part1")
             else
                DEVID=$(ls -1 /dev/disk/by-id | grep "^usb-" | grep "part1")
             fi
             DEV=$(readlink -e "/dev/disk/by-id/$DEVID")
             MOUNTPOINT=$(grep "$DEV" /etc/mtab | cut -f2 -d " ")
             if [ -z "$MOUNTPOINT" ]
             then
                echo "ERROR: Flash isn't mounted."
                zenity --error --text="Flash isn't mounted."
                exit 1
             fi
             FULLDEST=$MOUNTPOINT/$DEST
         fi
         zenity --progress --pulsate --text="Exchanging data..." &
         ZENPID=$!
         cd "$SOURCE"
         git add *
         git commit -a -m "`date`"
         git fetch "$FULLDEST"
         ERRORS=`git merge -m "Merge on \`date\`" FETCH_HEAD 2>&1 | grep "^CONFLICT"`
         if [ -n "$ERRORS" ]
         then
             ORIGIFS=$IFS
             IFS='
'
             for l in $ERRORS
             do
                 FILE=`echo $l | sed 's/CONFLICT (content): Merge conflict in \(.*\)$/\1/'`
                 git checkout ORIG_HEAD "$FILE"
                 FULLFILE=`basename "$FILE"`
                 EXT=${FULLFILE##*.}
                 if [ "$EXT" = "$FULLFILE" ]
                 then
                     EXT=
                 else
                     EXT=.$EXT
                 fi
                 FILENAME=${FULLFILE%.*}
                 git show FETCH_HEAD:"$FILE" > "`dirname "$FILE"`/${FILENAME}.remote$EXT"
             done
             IFS=$ORIGIFS
             git add *
             git commit -a -m "`date`"
         fi
         git push "$FULLDEST" master:master
         if [ ! "$NET" = "1" ]
         then
            cd "$FULLDEST"
            git reset --hard
         fi
         kill $ZENPID
     ;;
    "s") cd "$SOURCE"
         git add *
         git commit -a -m "`date`"
         ;;
    "r") cd "$SOURCE"
         SELECTED=`git log --oneline "$2" | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Найденные ревизии" --text "Ревизии для файла $2" --column "Коммит" --column "Дата" --print-column=ALL`
         [ -z "$SELECTED" ] && exit
         REV=`echo $SELECTED | cut -f1 -d "|"`
         DATE=`echo $SELECTED | cut -f2 -d "|"`
         RELPATH=${2##${SOURCE}/}
         FULLFILE=`basename "$2"`
         EXT=${FULLFILE##*.}
         if [ "$EXT" = "$FULLFILE" ]
         then
            EXT=
         else
            EXT=.$EXT
         fi
         FILENAME=${FULLFILE%.*}
         # ugliest hack ever: using tee instead of stdout redirection because of dash v5.5
         # unicode filenames garbling. Ubuntu 10.04 is still using this.
         git show $REV:"$RELPATH" | tee "`dirname "$RELPATH"`/${FILENAME} ($DATE)$EXT"
         ;;
    "h") cd "$SOURCE"
         while true
         do
            SELECTED=`git log --oneline | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Ревизии" --text "Все ревизии" --column "Коммит" --column "Дата" --print-column=ALL --width=640 --height=480`
            [ -z "$SELECTED" ] && exit
            REV=`echo $SELECTED | cut -f1 -d "|"`
            DATE=`echo $SELECTED | cut -f2 -d "|"`
            CURPATH=
            while true
            do
                FILES=`git ls-tree $REV "$CURPATH" | sed 's/^[^ ]* \([^ ]*\) [0-9a-f]*\s*\(.*\)$/\1\n\2/' | zenity --list --title "Файлы" --text "Вы здесь: $CURPATH" --column "Тип" --column "Название" --print-column=ALL --width=640 --height=480 --multiple`
                if [ -z "$FILES" ]
                then
                    [ -z "$CURPATH" ] && break
                    CURPATH=`dirname "${CURPATH%/}"`/
                    [ "$CURPATH" = "./" ] && CURPATH=
                else
                    while [ -n "$FILES" ]
                    do
                        TYPE=`echo $FILES | cut -f1 -d "|"`
                        FILE=`echo $FILES | cut -f2 -d "|"`
                        case "$TYPE" in
                            "tree") CURPATH=$FILE/
                                    break
                                    ;;
                            "blob") FULLFILE=`basename "$FILE"`
                                    EXT=${FULLFILE##*.}
                                    if [ "$EXT" = "$FULLFILE" ]
                                    then
                                        EXT=
                                    else
                                        EXT=.$EXT
                                    fi
                                    FILENAME=${FULLFILE%.*}
                                    [ -n "$CURPATH" ] && mkdir -p "$CURPATH"
                                    git show $REV:"$FILE" | tee "$CURPATH$FILENAME ($DATE)$EXT"
                                    ;;
                        esac
                        FILES=`echo $FILES| cut -f3- -d "|"`
                    done
                    [ -z "$FILES" ] && exit
                fi
            done
         done
         ;;
esac

