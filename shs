#!/bin/sh

getdest () {
    if [ "$NET" = "1" ]
         then
             FULLDEST=$DEST
         else
             if [ -n "$SERIAL" ]
             then
                DEVID=$(ls -1 /dev/disk/by-id | grep "^usb-" | grep "$SERIAL" | grep "part1")
             else
                DEVID=$(ls -1 /dev/disk/by-id | grep "^usb-" | grep "part1")
             fi
             DEV=$(readlink -e "/dev/disk/by-id/$DEVID")
             MOUNTPOINT=$(grep "$DEV" /etc/mtab | cut -f2 -d " ")
             if [ -z "$MOUNTPOINT" ]
             then
                echo "ERROR: Flash isn't mounted."
                zenity --error --text="Flash isn't mounted."
                exit 1
             fi
             FULLDEST=$MOUNTPOINT/$DEST
    fi
    echo $FULLDEST
}

CURDIR=`pwd`
cd "`dirname "$0"`"
. ./shsconfig
SHSPATH=`pwd`/`basename $0`

if [ $# -eq 0 ]
then
    echo "Shell Sparkle is a shell-based file synchronizing tool which supports USB
drives and network as medium. It uses git for versioning and restoring deleted files.
Usage:

\033[1mshs m <w|g> /dev/sdX1 [timeout]\033[0m — mount specified device and perform the data
exchange. Use pmount if the second argument is 'w' (Windows Manager) or wait for
DE mounting ('g' is for GNOME or GUI). The timeout is 60 seconds by default.
You probably don't need to use it directly, this is called from the udev rule.
\033[1mshs i <t|n>\033[0m — install context menu commands for Thunar or Nautilus respectively.
\033[1mshs c /path/to/new/box\033[0m — create a new exchange directory. It just initializes a git
repo and sets some config parameters. You should manually set the SOURCE var in the
config.
\033[1mshs s\033[0m — synchronize your files with the local git repo. Use this in the crontab.
\033[1mshs e\033[0m — synchronize your local git repo with the remote one (USB drive or network).
Conflicts are resolved automatically and if there are big differences then remote
conflicting files are created with the suffix '.remote' for you to review and merge
changes.
\033[1mshs r /path/to/file\033[0m — restore an older revision of the file.
\033[1mshs h\033[0m — restore a file or files of an arbitrary revision."
    exit
fi
if [ -z `which git` -o -z `which zenity` ]
then
    echo 'git or zenity is not installed!'
    zenity --error --text='git or zenity is not installed!'
    exit
fi
case "$1" in
    "m") case "$2" in
            "w") pmount "$3"
                 ;;
            "g") TIME=60
                 [ -n "$4" ] && TIME=$4
                 while [ $TIME -gt 0 ]
                 do
                    [ -n "`grep $3 /etc/mtab`" ] && break
                    sleep 1
                    TIME=$(( TIME-1 ))
                 done
                 [ $TIME -eq 0 ] && exit 1
                 ;;
         esac
         "$SHSPATH" e
         ;;
    "i") case "$2" in
         "t") mkdir -p "$HOME/.config/Thunar"
              if [ ! -f thunar.tpl ]
              then
                echo 'thunar.tpl not found.'
                zenity --error --text='thunar.tpl not found.'
                exit
              fi
              COMMANDS=`sed "s,@shsexec@,$SHSPATH,g" thunar.tpl`
              if [ -f "$HOME/.config/Thunar/uca.xml" ]
              then
                cp "$HOME/.config/Thunar/uca.xml" "$HOME/.config/Thunar/uca.xml.bak"
                sed "s,\(<action><icon>[^<]*</icon><name>SHS [^<]*</name><command>[^<]*</command><description>[^<]*</description>\(<patterns>\*</patterns>\)*\(<directories/>\)*\(<audio-files/>\)*\(<image-files/>\)*\(<other-files/>\)*\(<text-files/>\)*\(<video-files/>\)*</action>\),,g" "$HOME/.config/Thunar/uca.xml" | sed "s,\(.*\)</actions>,\1$COMMANDS</actions>," > "$HOME/.config/Thunar/uca.xml.new"
                mv "$HOME/.config/Thunar/uca.xml.new" "$HOME/.config/Thunar/uca.xml"
              else
                echo "<?xml encoding="UTF-8" version="1.0"?>\n<actions>$COMMANDS</actions>" > "$HOME/.config/Thunar/uca.xml"
              fi
              ;;
         "n") if [ -z "`which nautilus-actions-config-tool`" ]
              then
                echo "ERROR: nautilus-actions isn't installed."
                exit 1
              fi
              if [ ! -f nautilus.tpl ]
              then
                echo 'nautilus.tpl not found.'
                zenity --error --text='nautilus.tpl not found.'
                exit
              fi
              TMP=`mktemp`
              COMIDS="244e1258-d9f0-48b5-be40-3c752a7b5ed3 323d26f2-aa2a-469b-a38b-805557d2c17c 63bbf7f3-d50f-4532-9a49-e699a7a8bd23 91f0e32e-855a-43ed-a74a-bc54ac5d2e8d 94bbe111-7ab6-4fd2-b864-4ff823a04368"
              gconftool-2 --spawn
              for i in $COMIDS
              do
                gconftool-2 --recursive-unset /apps/nautilus-actions/configurations/$i
              done
              killall gconfd-2
              sleep 2
              sed "s,@shsexec@,$SHSPATH,g" nautilus.tpl | sed "s,@shsbox@,$SOURCE,g" > $TMP
              gconftool-2 --spawn
              gconftool-2 --load $TMP
              rm $TMP
              killall gconfd-2
             ;;
         esac
         ;;
    "c") cd "$CURDIR"
         git init "$2"
         cd "$2"
         git config receive.denyCurrentBranch ignore
         git config core.quotepath false
         zenity --info --text="SHS exchange box was successfully created in $2"
         ;;
    "e") FULLDEST=`getdest`
         zenity --progress --pulsate --text="Exchanging data..." &
         ZENPID=$!
         cd "$SOURCE"
         git add *
         if [ "$NET" != "1" ]
         then
             REMOTECOMMIT=`cd "$FULLDEST"; git log --reverse --pretty=oneline | head -n1`
         else
             ADDR=`echo $DEST | sed "s,ssh://\([^/]*\)/.*,\1,"`
             DPATH=`echo $DEST | sed "s,ssh://[^/]*\(/.*\),\1,"`
             REMOTECOMMIT=`ssh $ADDR "cd $DPATH; git log --reverse --pretty=oneline | head -n1"`
         fi
         REMOTEMSG=`echo $REMOTECOMMIT | cut -f2- -d ' '`
         REMOTEROOT=`echo $REMOTECOMMIT | cut -f1 -d ' '`
         LOCALROOT=`cd "$SOURCE"; git log --reverse --pretty=oneline | head -n1 | cut -f1 -d ' '`
         echo "LOCALROOT: $LOCALROOT REMOTEROOT: $REMOTEROOT"
         if [ "$LOCALROOT" != "$REMOTEROOT" ] # pruning happened
         then
            git checkout --orphan temp
            git fetch "$FULLDEST"
            git branch -D master
            git branch -m master
            git commit -a -m "`date`"
         else
             git commit -a -m "`date`"
             git fetch "$FULLDEST"
         fi
         ERRORS=`git merge -m "Merge on \`date\`" FETCH_HEAD 2>&1 | grep "^CONFLICT"`
         if [ -n "$ERRORS" ]
         then
             ORIGIFS=$IFS
             IFS='
'
             for l in $ERRORS
             do
                 FILE=`echo $l | sed 's/CONFLICT (content): Merge conflict in \(.*\)$/\1/'`
                 git checkout ORIG_HEAD "$FILE"
                 FULLFILE=`basename "$FILE"`
                 EXT=${FULLFILE##*.}
                 if [ "$EXT" = "$FULLFILE" ]
                 then
                     EXT=
                 else
                     EXT=.$EXT
                 fi
                 FILENAME=${FULLFILE%.*}
                 git show FETCH_HEAD:"$FILE" > "`dirname "$FILE"`/${FILENAME}.remote$EXT"
             done
             IFS=$ORIGIFS
             git add *
             git commit -a -m "`date`"
         fi
         git push "$FULLDEST" master:master
         if [ ! "$NET" = "1" ]
         then
            cd "$FULLDEST"
            git reset --hard
         fi
         kill $ZENPID
     ;;
    "s") cd "$SOURCE"
         git add *
         git commit -a -m "`date`"
         ;;
    "r") cd "$SOURCE"
         SELECTED=`git log --oneline "$2" | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Найденные ревизии" --text "Ревизии для файла $2" --column "Коммит" --column "Дата" --print-column=ALL`
         [ -z "$SELECTED" ] && exit
         REV=`echo $SELECTED | cut -f1 -d "|"`
         DATE=`echo $SELECTED | cut -f2 -d "|"`
         RELPATH=${2##${SOURCE}/}
         FULLFILE=`basename "$2"`
         EXT=${FULLFILE##*.}
         if [ "$EXT" = "$FULLFILE" ]
         then
            EXT=
         else
            EXT=.$EXT
         fi
         FILENAME=${FULLFILE%.*}
         # ugliest hack ever: using tee instead of stdout redirection because of dash v5.5
         # unicode filenames garbling. Ubuntu 10.04 is still using this.
         git show $REV:"$RELPATH" | tee "`dirname "$RELPATH"`/${FILENAME} ($DATE)$EXT"
         ;;
    "h") cd "$SOURCE"
         while true
         do
            SELECTED=`git log --oneline | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Ревизии" --text "Все ревизии" --column "Коммит" --column "Дата" --print-column=ALL --width=640 --height=480`
            [ -z "$SELECTED" ] && exit
            REV=`echo $SELECTED | cut -f1 -d "|"`
            DATE=`echo $SELECTED | cut -f2 -d "|"`
            CURPATH=
            while true
            do
                FILES=`git ls-tree $REV "$CURPATH" | sed 's/^[^ ]* \([^ ]*\) [0-9a-f]*\s*\(.*\)$/\1\n\2/' | zenity --list --title "Файлы" --text "Вы здесь: $CURPATH" --column "Тип" --column "Название" --print-column=ALL --width=640 --height=480 --multiple`
                if [ -z "$FILES" ]
                then
                    [ -z "$CURPATH" ] && break
                    CURPATH=`dirname "${CURPATH%/}"`/
                    [ "$CURPATH" = "./" ] && CURPATH=
                else
                    while [ -n "$FILES" ]
                    do
                        TYPE=`echo $FILES | cut -f1 -d "|"`
                        FILE=`echo $FILES | cut -f2 -d "|"`
                        case "$TYPE" in
                            "tree") CURPATH=$FILE/
                                    break
                                    ;;
                            "blob") FULLFILE=`basename "$FILE"`
                                    EXT=${FULLFILE##*.}
                                    if [ "$EXT" = "$FULLFILE" ]
                                    then
                                        EXT=
                                    else
                                        EXT=.$EXT
                                    fi
                                    FILENAME=${FULLFILE%.*}
                                    [ -n "$CURPATH" ] && mkdir -p "$CURPATH"
                                    git show $REV:"$FILE" | tee "$CURPATH$FILENAME ($DATE)$EXT"
                                    ;;
                        esac
                        FILES=`echo $FILES| cut -f3- -d "|"`
                    done
                    [ -z "$FILES" ] && exit
                fi
            done
         done
         ;;
         p) cd "$SOURCE"
            if [ $# -eq 1 ]
            then
               SELECTED=`git log --oneline | sed 's/\([^ ]*\) \(.*\)/\1\n\2/' | zenity --list --title "Ревизии" --text "Все ревизии" --column "Коммит" --column "Дата" --print-column=ALL --width=640 --height=480`
                [ -z "$SELECTED" ] && exit
                REV=`echo $SELECTED | cut -f1 -d "|"`
            else
                REV=$2
            fi
            if [ "$NET" != "1" ]
            then
                for P in "$SOURCE" "`getdest`"
                do
                    cd "$P"
                    git filter-branch -f --parent-filter "if [ \$GIT_COMMIT = $REV ]; then echo ""; else read line; echo $line; fi"
                    rm -rf .git/logs
                    rm -rf .git/refs/original/
                    git gc --prune=now
                done
            else
                git filter-branch -f --parent-filter "if [ \$GIT_COMMIT = $REV ]; then echo ""; else read line; echo $line; fi"
                rm -rf .git/logs
                rm -rf .git/refs/original/
                git gc --prune=now
                ADDR=`echo $DEST | sed "s,ssh://\([^/]*\)/.*,\1,"`
                DPATH=`echo $DEST | sed "s,ssh://[^/]*\(/.*\),\1,"`
                ssh $ADDR "cd $DPATH; git filter-branch -f --parent-filter \"if [ \$GIT_COMMIT = $REV ]; then echo \"\"; else read line; echo \$line; fi\"; rm -rf .git/logs; rm -rf .git/refs/original/; git gc --prune=now"
            fi
            ;;
esac

